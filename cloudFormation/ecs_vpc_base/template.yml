AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestrutura ECS Fargate com VPC, ALB, Target Groups e alta disponibilidade'

Parameters:
  # Configurações da VPC
  VPCName:
    Type: String
    Default: 'MyVPC'
    Description: 'Nome da VPC'
  
  VPCCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR da VPC'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$'
  
  # Configuração de NAT Gateways
  NATGatewayCount:
    Type: Number
    Default: 2
    AllowedValues: [1, 2]
    Description: 'Número de NAT Gateways (1 para economia, 2 para alta disponibilidade)'
  
  # Configurações do ECS
  ECSClusterName:
    Type: String
    Default: 'MyECSCluster'
    Description: 'Nome do cluster ECS'
  
  ECSFargateWeight:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 10
    Description: 'Peso para instâncias Fargate regular (0-10)'
  
  ECSFargateSpotWeight:
    Type: Number
    Default: 4
    MinValue: 0
    MaxValue: 10
    Description: 'Peso para instâncias Fargate Spot (0-10)'
  
  EnableContainerInsights:
    Type: String
    Default: 'enabled'
    AllowedValues: [enabled, disabled]
    Description: 'Habilitar Container Insights para monitoramento'
  
  # Configurações do ALB
  ALBName:
    Type: String
    Default: 'MyApplicationLoadBalancer'
    Description: 'Nome do Application Load Balancer'
  
  ALBScheme:
    Type: String
    Default: 'internet-facing'
    AllowedValues: [internet-facing, internal]
    Description: 'Esquema do ALB (internet-facing ou internal)'
  
  ALBListenerPort:
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
    Description: 'Porta do listener do ALB'
  
  ALBListenerProtocol:
    Type: String
    Default: 'HTTP'
    AllowedValues: [HTTP, HTTPS]
    Description: 'Protocolo do listener do ALB'
  
  # Target Group 1
  TargetGroup1Name:
    Type: String
    Default: 'TG-App1'
    Description: 'Nome do primeiro Target Group'
  
  TargetGroup1Port:
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
    Description: 'Porta do primeiro Target Group'
  
  TargetGroup1Protocol:
    Type: String
    Default: 'HTTP'
    AllowedValues: [HTTP, HTTPS]
    Description: 'Protocolo do primeiro Target Group'
  
  TargetGroup1HealthCheckPath:
    Type: String
    Default: '/health'
    Description: 'Caminho do health check para o primeiro Target Group'
  
  TargetGroup1HealthCheckIntervalSeconds:
    Type: Number
    Default: 30
    MinValue: 5
    MaxValue: 300
    Description: 'Intervalo do health check em segundos para o primeiro Target Group'
  
  TargetGroup1HealthCheckTimeoutSeconds:
    Type: Number
    Default: 5
    MinValue: 2
    MaxValue: 120
    Description: 'Timeout do health check em segundos para o primeiro Target Group'
  
  TargetGroup1HealthyThresholdCount:
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 10
    Description: 'Número de checks consecutivos bem-sucedidos para considerar healthy'
  
  TargetGroup1UnhealthyThresholdCount:
    Type: Number
    Default: 3
    MinValue: 2
    MaxValue: 10
    Description: 'Número de checks consecutivos falhados para considerar unhealthy'
  
  TargetGroup1HealthCheckStatusCodes:
    Type: String
    Default: '200'
    Description: 'Códigos de status HTTP considerados como healthy (ex: 200,301-302)'
  
  # Target Group 2
  TargetGroup2Name:
    Type: String
    Default: 'TG-App2'
    Description: 'Nome do segundo Target Group'
  
  TargetGroup2Port:
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 65535
    Description: 'Porta do segundo Target Group'
  
  TargetGroup2Protocol:
    Type: String
    Default: 'HTTP'
    AllowedValues: [HTTP, HTTPS]
    Description: 'Protocolo do segundo Target Group'
  
  TargetGroup2HealthCheckPath:
    Type: String
    Default: '/health'
    Description: 'Caminho do health check para o segundo Target Group'
  
  TargetGroup2HealthCheckIntervalSeconds:
    Type: Number
    Default: 30
    MinValue: 5
    MaxValue: 300
    Description: 'Intervalo do health check em segundos para o segundo Target Group'
  
  TargetGroup2HealthCheckTimeoutSeconds:
    Type: Number
    Default: 5
    MinValue: 2
    MaxValue: 120
    Description: 'Timeout do health check em segundos para o segundo Target Group'
  
  TargetGroup2HealthyThresholdCount:
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 10
    Description: 'Número de checks consecutivos bem-sucedidos para considerar healthy'
  
  TargetGroup2UnhealthyThresholdCount:
    Type: Number
    Default: 3
    MinValue: 2
    MaxValue: 10
    Description: 'Número de checks consecutivos falhados para considerar unhealthy'
  
  TargetGroup2HealthCheckStatusCodes:
    Type: String
    Default: '200'
    Description: 'Códigos de status HTTP considerados como healthy (ex: 200,301-302)'
  
  # Ambiente
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: [dev, staging, prod]
    Description: 'Ambiente da aplicação'

Conditions:
  CreateTwoNATGateways: !Equals [!Ref NATGatewayCount, 2]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-IGW'
        - Key: Environment
          Value: !Ref Environment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Subnets Públicas
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [0, !Cidr [!Ref VPCCidr, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-Public-Subnet-1'
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [1, !Cidr [!Ref VPCCidr, 6, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-Public-Subnet-2'
        - Key: Environment
          Value: !Ref Environment

  # Subnets Privadas
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [2, !Cidr [!Ref VPCCidr, 6, 8]]
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-Private-Subnet-1'
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [3, !Cidr [!Ref VPCCidr, 6, 8]]
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-Private-Subnet-2'
        - Key: Environment
          Value: !Ref Environment

  # Elastic IPs para NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-NAT-EIP-1'
        - Key: Environment
          Value: !Ref Environment

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: CreateTwoNATGateways
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-NAT-EIP-2'
        - Key: Environment
          Value: !Ref Environment

  # NAT Gateways
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-NAT-Gateway-1'
        - Key: Environment
          Value: !Ref Environment

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateTwoNATGateways
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-NAT-Gateway-2'
        - Key: Environment
          Value: !Ref Environment

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-Public-RT'
        - Key: Environment
          Value: !Ref Environment

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Route Tables Privadas
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-Private-RT-1'
        - Key: Environment
          Value: !Ref Environment

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-Private-RT-2'
        - Key: Environment
          Value: !Ref Environment

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [CreateTwoNATGateways, !Ref NatGateway2, !Ref NatGateway1]

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ALBName}-SG'
      GroupDescription: 'Security Group para Application Load Balancer'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access from anywhere'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access from anywhere'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ALBName}-SG'
        - Key: Environment
          Value: !Ref Environment

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ECSClusterName}-SG'
      GroupDescription: 'Security Group para ECS Tasks'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 65535
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: 'Access from ALB'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ECSClusterName}-SG'
        - Key: Environment
          Value: !Ref Environment

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBName
      Scheme: !Ref ALBScheme
      Type: application
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref ALBName
        - Key: Environment
          Value: !Ref Environment

  # Target Groups
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroup1Name
      Port: !Ref TargetGroup1Port
      Protocol: !Ref TargetGroup1Protocol
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref TargetGroup1HealthCheckIntervalSeconds
      HealthCheckPath: !Ref TargetGroup1HealthCheckPath
      HealthCheckProtocol: !Ref TargetGroup1Protocol
      HealthCheckTimeoutSeconds: !Ref TargetGroup1HealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref TargetGroup1HealthyThresholdCount
      UnhealthyThresholdCount: !Ref TargetGroup1UnhealthyThresholdCount
      Matcher:
        HttpCode: !Ref TargetGroup1HealthCheckStatusCodes
      Tags:
        - Key: Name
          Value: !Ref TargetGroup1Name
        - Key: Environment
          Value: !Ref Environment

  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroup2Name
      Port: !Ref TargetGroup2Port
      Protocol: !Ref TargetGroup2Protocol
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref TargetGroup2HealthCheckIntervalSeconds
      HealthCheckPath: !Ref TargetGroup2HealthCheckPath
      HealthCheckProtocol: !Ref TargetGroup2Protocol
      HealthCheckTimeoutSeconds: !Ref TargetGroup2HealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref TargetGroup2HealthyThresholdCount
      UnhealthyThresholdCount: !Ref TargetGroup2UnhealthyThresholdCount
      Matcher:
        HttpCode: !Ref TargetGroup2HealthCheckStatusCodes
      Tags:
        - Key: Name
          Value: !Ref TargetGroup2Name
        - Key: Environment
          Value: !Ref Environment

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            ContentType: 'text/plain'
            MessageBody: 'Not Found'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !Ref ALBListenerPort
      Protocol: !Ref ALBListenerProtocol

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: !Ref ECSFargateWeight
        - CapacityProvider: FARGATE_SPOT
          Weight: !Ref ECSFargateSpotWeight
      ClusterSettings:
        - Name: containerInsights
          Value: !Ref EnableContainerInsights
      Tags:
        - Key: Name
          Value: !Ref ECSClusterName
        - Key: Environment
          Value: !Ref Environment

Outputs:
  VPCId:
    Description: 'ID da VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  PublicSubnet1Id:
    Description: 'ID da Subnet Pública 1'
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1-ID'

  PublicSubnet2Id:
    Description: 'ID da Subnet Pública 2'
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2-ID'

  PrivateSubnet1Id:
    Description: 'ID da Subnet Privada 1'
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1-ID'

  PrivateSubnet2Id:
    Description: 'ID da Subnet Privada 2'
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2-ID'

  ALBSecurityGroupId:
    Description: 'ID do Security Group do ALB'
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALB-SG-ID'

  ECSSecurityGroupId:
    Description: 'ID do Security Group do ECS'
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ECS-SG-ID'

  LoadBalancerArn:
    Description: 'ARN do Application Load Balancer'
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-ALB-ARN'

  LoadBalancerDNSName:
    Description: 'DNS Name do Application Load Balancer'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-DNS'

  TargetGroup1Arn:
    Description: 'ARN do Target Group 1'
    Value: !Ref TargetGroup1
    Export:
      Name: !Sub '${AWS::StackName}-TG1-ARN'

  TargetGroup2Arn:
    Description: 'ARN do Target Group 2'
    Value: !Ref TargetGroup2
    Export:
      Name: !Sub '${AWS::StackName}-TG2-ARN'

  ECSClusterName:
    Description: 'Nome do ECS Cluster'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECS-Cluster-Name'

  ECSClusterArn:
    Description: 'ARN do ECS Cluster'
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECS-Cluster-ARN'

  ALBListenerArn:
    Description: 'ARN do ALB Listener'
    Value: !Ref ALBListener
    Export:
      Name: !Sub '${AWS::StackName}-ALB-Listener-ARN'
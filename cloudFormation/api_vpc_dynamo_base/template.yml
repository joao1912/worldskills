AWSTemplateFormatVersion: '2010-09-09'
Description: 'Base infrastructure with VPC, API Gateway, Lambda, and DynamoDB following best practices for high availability'

Parameters:
  ProjectName:
    Type: String
    Default: 'base-infra'
    Description: 'Project name used for resource naming'
    AllowedPattern: '^[a-z0-9-]+'

  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - dev
      - staging
      - prod
    Description: 'Environment name'

  NATGatewayCount:
    Type: String
    Default: '2'
    AllowedValues:
      - '1'
      - '2'
    Description: 'Number of NAT Gateways (1 for cost optimization, 2 for high availability)'

  ApiGatewayExecutionRoleArn:
    Type: String
    Default: ''
    Description: 'Optional: ARN of an existing API Gateway Execution Role'

  LambdaExecutionRoleArn:
    Type: String
    Description: 'ARN of an existing Lambda Execution Role with DynamoDB permissions'
    AllowedPattern: '^arn:aws:iam::[0-9]{12}:role/.+'
    ConstraintDescription: 'Must be a valid IAM Role ARN'

Conditions:
  CreateTwoNATGateways: !Equals [ !Ref NATGatewayCount, '2' ]
  CreateApiGatewayRole: !Equals [ !Ref ApiGatewayExecutionRoleArn, '' ]

Resources:
  # === VPC and Networking Resources ===

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-vpc'
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-1'
        - Key: Type
          Value: Public

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-subnet-2'
        - Key: Type
          Value: Public

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-1'
        - Key: Type
          Value: Private

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-subnet-2'
        - Key: Type
          Value: Private

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-eip-1'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: CreateTwoNATGateways
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-eip-2'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-gw-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateTwoNATGateways
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-nat-gw-2'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-public-rt'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-rt-1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-private-rt-2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If 
        - CreateTwoNATGateways
        - !Ref NatGateway2
        - !Ref NatGateway1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # === DynamoDB Table ===

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-main-table'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-main-table'
        - Key: Environment
          Value: !Ref Environment

  # === IAM Roles - Removed (using external roles) ===
  # All IAM roles are provided as parameters and created externally

  # === Lambda Function ===

  ItemsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-items-function'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !Ref LambdaExecutionRoleArn
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from decimal import Decimal
          
          # Helper class to handle Decimal serialization
          class DecimalEncoder(json.JSONEncoder):
              def default(self, o):
                  if isinstance(o, Decimal):
                      return float(o)
                  return super(DecimalEncoder, self).default(o)
          
          dynamodb = boto3.resource('dynamodb')
          
          def lambda_handler(event, context):
              table_name = os.environ['TABLE_NAME']
              table = dynamodb.Table(table_name)
              
              try:
                  # Get the path from the event
                  path = event.get('pathParameters', {}).get('proxy', '') if event.get('pathParameters') else ''
                  http_method = event.get('httpMethod', '')
                  
                  # Handle different paths
                  if path == 'items' and http_method == 'GET':
                      # Scan all items from DynamoDB
                      response = table.scan()
                      items = response.get('Items', [])
                      
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
                          },
                          'body': json.dumps({
                              'items': items,
                              'count': len(items),
                              'table': table_name
                          }, cls=DecimalEncoder)
                      }
                  
                  elif path == 'items' and http_method == 'POST':
                      # Add new item to DynamoDB
                      try:
                          body = json.loads(event.get('body', '{}'))
                          if 'id' not in body:
                              return {
                                  'statusCode': 400,
                                  'headers': {
                                      'Content-Type': 'application/json',
                                      'Access-Control-Allow-Origin': '*'
                                  },
                                  'body': json.dumps({'error': 'Missing required field: id'})
                              }
                          
                          table.put_item(Item=body)
                          
                          return {
                              'statusCode': 201,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({
                                  'message': 'Item created successfully',
                                  'item': body
                              }, cls=DecimalEncoder)
                          }
                      except json.JSONDecodeError:
                          return {
                              'statusCode': 400,
                              'headers': {
                                  'Content-Type': 'application/json',
                                  'Access-Control-Allow-Origin': '*'
                              },
                              'body': json.dumps({'error': 'Invalid JSON in request body'})
                          }
                  
                  elif http_method == 'OPTIONS':
                      # Handle CORS preflight
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Access-Control-Allow-Origin': '*',
                              'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
                              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
                          },
                          'body': ''
                      }
                  
                  else:
                      # Default response for other paths
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'message': f'Lambda function received path: /{path}',
                              'method': http_method,
                              'table': table_name,
                              'available_endpoints': [
                                  'GET /items - List all items',
                                  'POST /items - Create new item (requires id field)'
                              ]
                          })
                      }
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'error': 'Internal server error',
                          'message': str(e)
                      })
                  }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-items-function'
        - Key: Environment
          Value: !Ref Environment

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ItemsLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*'

  # ============================================
  # API Gateway
  # ============================================
  
  # VPC Endpoint for API Gateway (for private access)
  ApiGatewayVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref ApiGatewayVPCEndpointSecurityGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - execute-api:Invoke
            Resource: '*'

  ApiGatewayVPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for API Gateway VPC Endpoint
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: HTTPS from VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-apigw-vpce-sg'

  # REST API
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      Description: !Sub 'REST API for ${ProjectName} ${Environment}'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'

  # API Gateway Account (for logging)
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !If 
        - CreateApiGatewayRole
        - !Ref ApiGatewayExecutionRoleArn
        - !Ref ApiGatewayExecutionRoleArn

  # Proxy resource with Lambda integration
  ApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: '{proxy+}'

  ApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ApiProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsLambdaFunction.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_MATCH

  # Root method for catch-all
  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsLambdaFunction.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_MATCH

  # Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiProxyMethod
      - ApiRootMethod
    Properties:
      RestApiId: !Ref RestApi
      Description: !Sub 'Deployment for ${ProjectName} ${Environment}'

  # Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref Environment
      Description: !Sub '${Environment} stage'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      Variables:
        environment: !Ref Environment

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${ProjectName}-${Environment}'
      RetentionInDays: 30

# ============================================
# Outputs
# ============================================

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${ProjectName}-${Environment}-vpc-id'

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${ProjectName}-${Environment}-public-subnet-1-id'

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${ProjectName}-${Environment}-public-subnet-2-id'

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${ProjectName}-${Environment}-private-subnet-1-id'

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${ProjectName}-${Environment}-private-subnet-2-id'

  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref DynamoDBTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-dynamodb-table-name'

  DynamoDBTableArn:
    Description: DynamoDB Table ARN
    Value: !GetAtt DynamoDBTable.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-dynamodb-table-arn'

  RestApiId:
    Description: REST API ID
    Value: !Ref RestApi
    Export:
      Name: !Sub '${ProjectName}-${Environment}-rest-api-id'

  RestApiUrl:
    Description: REST API URL
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-rest-api-url'

  LambdaFunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt ItemsLambdaFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-function-arn'

  LambdaFunctionName:
    Description: Lambda Function Name
    Value: !Ref ItemsLambdaFunction
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-function-name'

  ApiGatewayExecutionRoleArn:
    Description: API Gateway Execution Role ARN
    Value: !Ref ApiGatewayExecutionRoleArn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-api-gateway-role-arn'

  LambdaExecutionRoleArn:
    Description: Lambda Execution Role ARN
    Value: !Ref LambdaExecutionRoleArn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-lambda-role-arn'